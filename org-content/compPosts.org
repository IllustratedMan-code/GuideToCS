#+hugo_base_dir: ../
#+hugo_section: Intro-to-Comp-Systems
* How to write a micro-instruction
:PROPERTIES:
:EXPORT_HUGO_SECTION*: How To Write a micro-instruction
:EXPORT_FILE_NAME: _index
:END:
A micro-instruction is just a binary (often converted to hex) number that represents a list of control signals, and points to the next micro-instruction.  Micro-instructions can be changed by changing the  A set of micro-instructions forms a micro-routine (otherwise known as an instruction).
** Control signals
To understand the micro-instruction, you must understand what the control signals do. I will be referencing the Hard vs Micro paper. It has LA (load accumulator), and EA (enable accumulator) signals. They are essentially just wires connected to the control unit (referenced by the 16 coming out of CONTROL) Each register also generally has a clock signal (CLK), but that is connected directly to the clock circuit and is not required for the micro-instructions. The naming system for the signals is somewhat arbitrary but usually follows the pattern (L, E) (register). This is subverted somewhat by the ALU, but that will most likely be directly defined. The other main difference is the inclusion of I, which just means increment.

*** Load (L)
A load signal allows the contents of a register to be changed by the state of the bus (a collection of wires). This signal must be paired with an E signal to do anything.
*** Enable (E)
An enable signal changes the state of the bus to match the contents of the register. Say a register contains the value 1111, when the enable signal is used for that register, the contents of the bus will now be 1111. This signal must be paired with a L signal to do anything.
** Micro-instructions
A micro-instruction is a binary number composed of several =fields= stored at a specific address in the ROM (read only memory) of the control unit.
*** Control field
This is just a binary representation of the signals. In the hard vs micro document, the letters are signals are abbreviated into the following order:
- ILELAWLELELEASEL
  Expanded: IP LP EP LM R W LD ED LI EI LA EA A S E
A micro instruction will generally contain a pair of signals (L E) that transfers the contents of one register into another. The contents of the enabled register moves into the loaded register through the bus. A 1 means that the signal is on while a 0 means the signal is off.
*** Next Address field
This field has 4 different sub fields. it is used to determine the next micro instruction.
**** CD
CD (short for condition) is used for conditional logic. This bit makes the next micro-instruction depend on the value of the negative flag. This is generally off, unless you want conditional logic, see JN micro-routine
**** MAP
the map bit uses the next micro-instruction in the control ROM, see Fetch-routine . This is generally off.
**** CRJA field
This field consists of an address in the control ROM
** LDA micro-routine
Here is a step by step on how to write this instruction with micro-instructions.
1. Find out where the data is coming from.
2. Map out the sub-steps:
   1. IR -> MAR
   2. RAM -> MDR
   3. MDR -> ACC
3. determine the signals for each substep:
   1. EI, LM
   2. R
   3. ED, LA
4. Link the micro-instructions with the next address field.
   1. address of next micro-instruction (04) in this case
   2. address of next micro-instruction (05) in this case
   3. link back to fetch (00) in this case
5. Write the codes!
   1. (0001000001000000)(0)(0)(0)(0100)
   2. (0000010000000000)(0)(0)(0)(0101)
   3. (0000000010010000)(0)(0)(0)(0000)
6. Optional convert to hex
   1. 82004
   2. 20005
   3. 4800



* Mock Exam Questions
:PROPERTIES:
:EXPORT_HUGO_SECTION*: Mock Exam Questions
:EXPORT_FILE_NAME: _index
:END:
Question 1 and 2 seem to reference this article:
[[file:pdfs/8086.pdf][8086-8088]]
** Q1
If a physical branch target address is 5A230 when CS = 5200, what will it be if the CS = 7800 ?
+ We need to find the offset, where offset + CS(shifted 4 bits) = physical branch target address. CS(C segment register)
+ Offset = Physical branch target address - CS
+ Offset = 5A230 - 52000 = 8230 (hex)
The offset is then used to find the physical branch target adress.
+ 78000 + 8230 = 80230 = physical branch target address
** Q2
Given that the EA of a data is 2359 and DS = 490B, what is the PA of data?
- =EA (effective Address), DS (D segment register), PA(Physical Address)=.
Physical address is given by EA + DS(shifted 4 bits).
+ DS = 490B0 (hex)
+ EA = 2359 (hex)
+ PA = 490B0 + 2359 = 4B409
** TODO Q3
Assuming, W, X, Y and Z as memory addresses. Write a program using any machine sequence that will carry out the following: Z ‚Üê W + (Z-X).
** TODO Q4
Assume that the code below is run on a machine with a 2 GHz clock that requires the following number of cycles for each instruction: add, addi, sll, sra take 4cc each,  lw takes 5cc,   bne, beq  take 3cc each. How many seconds will it take to execute this code. The values of registers are $4=0x20, $5= 0x20, $6= 0x30, $7= 0x10.
#+BEGIN_SRC mips
    .globl  main
    .text

main:
    sra $6, $6, 2   #
    sll $7, $7, 2
    add $8, $0, $0
L2: add $12, $4, $8
    lw  $12, 0($12)
    add $9, $0, $0
L1: add $11, $5, $9
    lw  $11, 0($11)
    addi $9, $9, 4
    bne $9, $7, L1
    addi $8, $8, 4
    beq $8, $6, L2
#+END_SRC
